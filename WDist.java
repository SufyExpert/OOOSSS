import java.util.Random;
/* This game is basically a simplification of Yard Sale model which is 
used by economists to model how wealth gets accumulated in fewer hands. 
In the original model one player gets all the wealth and other players 
are eliminated from the game one by one. This is how a capitalist society 
works, i.e wealth gets accumulated in fewer and fewer hands. Here is 
wealth distribution in America (generated by ChatGPT) for the last 10 years. 
Year	Top 1% (≈)	Next 19% (≈)	Bottom 80% (≈)
2015		29.0%	51.0%			20.0%
2016		30.0%	50.0%			20.0%
2017		30.8%	49.2%			20.0%
2018		31.0%	49.0%			20.0%
2019		32.0%	48.0%			20.0%
2020		31.0%	49.0%			20.0%
2021		33.0%	47.0%			20.0%
2022		32.0%	48.0%			20.0%
2023		33.5%	46.5%			20.0%
2024		30.8%	49.2%			20.0%
I have modified model by introducing the concept of Zakat in it. 
If you run it without zakat with (5 1000 200 0) as command line parameters 
the game will terminate after approximately 90 rounds, with all the 
wealth accumulated in one player. But if you turn on the zakat option 
(5 1000 200 1)the game will never terminate. As I said in the first line it is a 
simplification and as such the zakat rules are not enforced as described 
in sharia, i.e this is not a sharia compliant game. Its purpose is basically to 
make people think.
*/
public class WDist {

    public static void main(String[] args) {
		if ( args.length != 4 )
		{
			System.out.println("Please provide  number_of_Players initital_balance cut_Off_Value zakat_on_off");
			System.exit(1);
		}

        int numPlayers = Integer.parseInt(args[0]);
		int initialBalance = Integer.parseInt(args[1]);
		int cutOffValue = Integer.parseInt(args[2]);
		int zakat = Integer.parseInt(args[3]);
		int rounds = 0;
        // Initialize the balances of each player
		int[] balances = new int[numPlayers];
        for (int i = 0; i < numPlayers; i++) {
            balances[i] = initialBalance;
        }

        // Initialize the random number generator
        Random rand = new Random();

        // Keep playing the game until there is only one player left
        while (numPlayers > 1) {
            // Pair up the players
            for (int i = 0; i < numPlayers; i++) {
				
                // Skip eliminated players in case of non zakat version
                if ((balances[i] < cutOffValue) && ( zakat == 0)) {
                    continue;
                }

                // Find a valid opponent
                int opponent;
                do {
                    opponent = rand.nextInt(numPlayers);
                } while (opponent == i || balances[opponent] < cutOffValue);

                // Determine the bet amount
                int betAmount = Math.min(balances[i], balances[opponent]) / 5;

                // Flip the coin and determine the winner
                boolean coinFlip = rand.nextBoolean();
                if (coinFlip) {
                    balances[i] += betAmount;
                    balances[opponent] -= betAmount;
                } else {
                    balances[i] -= betAmount;
                    balances[opponent] += betAmount;
                }

                // Print the results of the bet
                System.out.println("Player " + i + " (" + balances[i] + ") vs Player " + opponent + " (" + balances[opponent] + ")");
            }
			System.out.printf("This was round# %d\n", ++rounds);
            // If Zakat is off then eliminate players with less than cutOffValue
            if (zakat == 1)
			{	
				/* find the player with balance less than the cutoffvalue and find player 
				with max balance, i.e the richest person and
				transfer 2.5% of wealth from rich to poor */
				int rich, max, poor, calc_zakat;
				max = rich = poor = 0;
				boolean found_poor = false;
				for (int i = 0; i < numPlayers; i++)  // go through all the players and
					if (balances[i] <= cutOffValue) { // find the player with balance less than the cutoffvalue
						found_poor = true;
						poor = i;
						break;
					}
				// if we have a poor we need to find a rich
				if (found_poor){
					max = 0;
					for (int i = 0; i < numPlayers; i++) { // go through all the players and
						if (balances[i] > max) { // find the player with max balance
							max = balances[i];
							rich = i;
						}
					}
					calc_zakat = (int)(balances[rich]*.025);
					balances[poor] = balances[poor] + calc_zakat;
					balances[rich] = balances[rich] - calc_zakat;
					System.out.println("Zakat = " + calc_zakat + " was tranfered from Player " + rich + " to " + poor);
				}
			}
			else
			{
				int numRemainingPlayers = 0;
				for (int i = 0; i < numPlayers; i++) {
					if (balances[i] >= cutOffValue) {
						balances[numRemainingPlayers] = balances[i];
						numRemainingPlayers++;
					} 
					else
						System.out.println("Player " + i + " eliminated with balance " + balances[i]);
				}
				numPlayers = numRemainingPlayers;
			}
        }
		System.out.printf("Game finished after %d rounds\n", rounds);
	}
}
